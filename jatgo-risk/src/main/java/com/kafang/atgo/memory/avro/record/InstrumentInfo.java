/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafang.atgo.memory.avro.record;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class InstrumentInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3284259790617814561L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InstrumentInfo\",\"namespace\":\"com.kafang.atgo.memory.avro.record\",\"fields\":[{\"name\":\"sendingTime\",\"type\":\"long\"},{\"name\":\"instrumentId\",\"type\":\"int\"},{\"name\":\"transactTime\",\"type\":\"long\"},{\"name\":\"prevClosePrice\",\"type\":\"double\"},{\"name\":\"upPrice\",\"type\":\"double\"},{\"name\":\"downPrice\",\"type\":\"double\"},{\"name\":\"tickSize\",\"type\":\"double\"},{\"name\":\"lotSize\",\"type\":\"int\"},{\"name\":\"specTreat\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InstrumentInfo> ENCODER =
      new BinaryMessageEncoder<InstrumentInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InstrumentInfo> DECODER =
      new BinaryMessageDecoder<InstrumentInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<InstrumentInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<InstrumentInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<InstrumentInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this InstrumentInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a InstrumentInfo from a ByteBuffer. */
  public static InstrumentInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long sendingTime;
   private int instrumentId;
   private long transactTime;
   private double prevClosePrice;
   private double upPrice;
   private double downPrice;
   private double tickSize;
   private int lotSize;
   private int specTreat;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InstrumentInfo() {}

  /**
   * All-args constructor.
   * @param sendingTime The new value for sendingTime
   * @param instrumentId The new value for instrumentId
   * @param transactTime The new value for transactTime
   * @param prevClosePrice The new value for prevClosePrice
   * @param upPrice The new value for upPrice
   * @param downPrice The new value for downPrice
   * @param tickSize The new value for tickSize
   * @param lotSize The new value for lotSize
   * @param specTreat The new value for specTreat
   */
  public InstrumentInfo(java.lang.Long sendingTime, java.lang.Integer instrumentId, java.lang.Long transactTime, java.lang.Double prevClosePrice, java.lang.Double upPrice, java.lang.Double downPrice, java.lang.Double tickSize, java.lang.Integer lotSize, java.lang.Integer specTreat) {
    this.sendingTime = sendingTime;
    this.instrumentId = instrumentId;
    this.transactTime = transactTime;
    this.prevClosePrice = prevClosePrice;
    this.upPrice = upPrice;
    this.downPrice = downPrice;
    this.tickSize = tickSize;
    this.lotSize = lotSize;
    this.specTreat = specTreat;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sendingTime;
    case 1: return instrumentId;
    case 2: return transactTime;
    case 3: return prevClosePrice;
    case 4: return upPrice;
    case 5: return downPrice;
    case 6: return tickSize;
    case 7: return lotSize;
    case 8: return specTreat;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sendingTime = (java.lang.Long)value$; break;
    case 1: instrumentId = (java.lang.Integer)value$; break;
    case 2: transactTime = (java.lang.Long)value$; break;
    case 3: prevClosePrice = (java.lang.Double)value$; break;
    case 4: upPrice = (java.lang.Double)value$; break;
    case 5: downPrice = (java.lang.Double)value$; break;
    case 6: tickSize = (java.lang.Double)value$; break;
    case 7: lotSize = (java.lang.Integer)value$; break;
    case 8: specTreat = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sendingTime' field.
   * @return The value of the 'sendingTime' field.
   */
  public java.lang.Long getSendingTime() {
    return sendingTime;
  }

  /**
   * Sets the value of the 'sendingTime' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setSendingTime(java.lang.Long value) {
    this.sendingTime = value;
	return this;
  }

  /**
   * Gets the value of the 'instrumentId' field.
   * @return The value of the 'instrumentId' field.
   */
  public java.lang.Integer getInstrumentId() {
    return instrumentId;
  }

  /**
   * Sets the value of the 'instrumentId' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setInstrumentId(java.lang.Integer value) {
    this.instrumentId = value;
	return this;
  }

  /**
   * Gets the value of the 'transactTime' field.
   * @return The value of the 'transactTime' field.
   */
  public java.lang.Long getTransactTime() {
    return transactTime;
  }

  /**
   * Sets the value of the 'transactTime' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setTransactTime(java.lang.Long value) {
    this.transactTime = value;
	return this;
  }

  /**
   * Gets the value of the 'prevClosePrice' field.
   * @return The value of the 'prevClosePrice' field.
   */
  public java.lang.Double getPrevClosePrice() {
    return prevClosePrice;
  }

  /**
   * Sets the value of the 'prevClosePrice' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setPrevClosePrice(java.lang.Double value) {
    this.prevClosePrice = value;
	return this;
  }

  /**
   * Gets the value of the 'upPrice' field.
   * @return The value of the 'upPrice' field.
   */
  public java.lang.Double getUpPrice() {
    return upPrice;
  }

  /**
   * Sets the value of the 'upPrice' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setUpPrice(java.lang.Double value) {
    this.upPrice = value;
	return this;
  }

  /**
   * Gets the value of the 'downPrice' field.
   * @return The value of the 'downPrice' field.
   */
  public java.lang.Double getDownPrice() {
    return downPrice;
  }

  /**
   * Sets the value of the 'downPrice' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setDownPrice(java.lang.Double value) {
    this.downPrice = value;
	return this;
  }

  /**
   * Gets the value of the 'tickSize' field.
   * @return The value of the 'tickSize' field.
   */
  public java.lang.Double getTickSize() {
    return tickSize;
  }

  /**
   * Sets the value of the 'tickSize' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setTickSize(java.lang.Double value) {
    this.tickSize = value;
	return this;
  }

  /**
   * Gets the value of the 'lotSize' field.
   * @return The value of the 'lotSize' field.
   */
  public java.lang.Integer getLotSize() {
    return lotSize;
  }

  /**
   * Sets the value of the 'lotSize' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setLotSize(java.lang.Integer value) {
    this.lotSize = value;
	return this;
  }

  /**
   * Gets the value of the 'specTreat' field.
   * @return The value of the 'specTreat' field.
   */
  public java.lang.Integer getSpecTreat() {
    return specTreat;
  }

  /**
   * Sets the value of the 'specTreat' field.
   * @param value the value to set.
   */
  public com.kafang.atgo.memory.avro.record.InstrumentInfo setSpecTreat(java.lang.Integer value) {
    this.specTreat = value;
	return this;
  }

  /**
   * Creates a new InstrumentInfo RecordBuilder.
   * @return A new InstrumentInfo RecordBuilder
   */
  public static com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder newBuilder() {
    return new com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder();
  }

  /**
   * Creates a new InstrumentInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InstrumentInfo RecordBuilder
   */
  public static com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder newBuilder(com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder other) {
    return new com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder(other);
  }

  /**
   * Creates a new InstrumentInfo RecordBuilder by copying an existing InstrumentInfo instance.
   * @param other The existing instance to copy.
   * @return A new InstrumentInfo RecordBuilder
   */
  public static com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder newBuilder(com.kafang.atgo.memory.avro.record.InstrumentInfo other) {
    return new com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder(other);
  }

  /**
   * RecordBuilder for InstrumentInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InstrumentInfo>
    implements org.apache.avro.data.RecordBuilder<InstrumentInfo> {

    private long sendingTime;
    private int instrumentId;
    private long transactTime;
    private double prevClosePrice;
    private double upPrice;
    private double downPrice;
    private double tickSize;
    private int lotSize;
    private int specTreat;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sendingTime)) {
        this.sendingTime = data().deepCopy(fields()[0].schema(), other.sendingTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[1].schema(), other.instrumentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactTime)) {
        this.transactTime = data().deepCopy(fields()[2].schema(), other.transactTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.prevClosePrice)) {
        this.prevClosePrice = data().deepCopy(fields()[3].schema(), other.prevClosePrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.upPrice)) {
        this.upPrice = data().deepCopy(fields()[4].schema(), other.upPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.downPrice)) {
        this.downPrice = data().deepCopy(fields()[5].schema(), other.downPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tickSize)) {
        this.tickSize = data().deepCopy(fields()[6].schema(), other.tickSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lotSize)) {
        this.lotSize = data().deepCopy(fields()[7].schema(), other.lotSize);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.specTreat)) {
        this.specTreat = data().deepCopy(fields()[8].schema(), other.specTreat);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing InstrumentInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafang.atgo.memory.avro.record.InstrumentInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sendingTime)) {
        this.sendingTime = data().deepCopy(fields()[0].schema(), other.sendingTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[1].schema(), other.instrumentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transactTime)) {
        this.transactTime = data().deepCopy(fields()[2].schema(), other.transactTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.prevClosePrice)) {
        this.prevClosePrice = data().deepCopy(fields()[3].schema(), other.prevClosePrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.upPrice)) {
        this.upPrice = data().deepCopy(fields()[4].schema(), other.upPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.downPrice)) {
        this.downPrice = data().deepCopy(fields()[5].schema(), other.downPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.tickSize)) {
        this.tickSize = data().deepCopy(fields()[6].schema(), other.tickSize);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lotSize)) {
        this.lotSize = data().deepCopy(fields()[7].schema(), other.lotSize);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.specTreat)) {
        this.specTreat = data().deepCopy(fields()[8].schema(), other.specTreat);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'sendingTime' field.
      * @return The value.
      */
    public java.lang.Long getSendingTime() {
      return sendingTime;
    }

    /**
      * Sets the value of the 'sendingTime' field.
      * @param value The value of 'sendingTime'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setSendingTime(long value) {
      validate(fields()[0], value);
      this.sendingTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sendingTime' field has been set.
      * @return True if the 'sendingTime' field has been set, false otherwise.
      */
    public boolean hasSendingTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sendingTime' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearSendingTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentId' field.
      * @return The value.
      */
    public java.lang.Integer getInstrumentId() {
      return instrumentId;
    }

    /**
      * Sets the value of the 'instrumentId' field.
      * @param value The value of 'instrumentId'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setInstrumentId(int value) {
      validate(fields()[1], value);
      this.instrumentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentId' field has been set.
      * @return True if the 'instrumentId' field has been set, false otherwise.
      */
    public boolean hasInstrumentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'instrumentId' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearInstrumentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactTime' field.
      * @return The value.
      */
    public java.lang.Long getTransactTime() {
      return transactTime;
    }

    /**
      * Sets the value of the 'transactTime' field.
      * @param value The value of 'transactTime'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setTransactTime(long value) {
      validate(fields()[2], value);
      this.transactTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transactTime' field has been set.
      * @return True if the 'transactTime' field has been set, false otherwise.
      */
    public boolean hasTransactTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transactTime' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearTransactTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'prevClosePrice' field.
      * @return The value.
      */
    public java.lang.Double getPrevClosePrice() {
      return prevClosePrice;
    }

    /**
      * Sets the value of the 'prevClosePrice' field.
      * @param value The value of 'prevClosePrice'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setPrevClosePrice(double value) {
      validate(fields()[3], value);
      this.prevClosePrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'prevClosePrice' field has been set.
      * @return True if the 'prevClosePrice' field has been set, false otherwise.
      */
    public boolean hasPrevClosePrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'prevClosePrice' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearPrevClosePrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'upPrice' field.
      * @return The value.
      */
    public java.lang.Double getUpPrice() {
      return upPrice;
    }

    /**
      * Sets the value of the 'upPrice' field.
      * @param value The value of 'upPrice'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setUpPrice(double value) {
      validate(fields()[4], value);
      this.upPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'upPrice' field has been set.
      * @return True if the 'upPrice' field has been set, false otherwise.
      */
    public boolean hasUpPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'upPrice' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearUpPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'downPrice' field.
      * @return The value.
      */
    public java.lang.Double getDownPrice() {
      return downPrice;
    }

    /**
      * Sets the value of the 'downPrice' field.
      * @param value The value of 'downPrice'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setDownPrice(double value) {
      validate(fields()[5], value);
      this.downPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'downPrice' field has been set.
      * @return True if the 'downPrice' field has been set, false otherwise.
      */
    public boolean hasDownPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'downPrice' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearDownPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'tickSize' field.
      * @return The value.
      */
    public java.lang.Double getTickSize() {
      return tickSize;
    }

    /**
      * Sets the value of the 'tickSize' field.
      * @param value The value of 'tickSize'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setTickSize(double value) {
      validate(fields()[6], value);
      this.tickSize = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'tickSize' field has been set.
      * @return True if the 'tickSize' field has been set, false otherwise.
      */
    public boolean hasTickSize() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'tickSize' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearTickSize() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lotSize' field.
      * @return The value.
      */
    public java.lang.Integer getLotSize() {
      return lotSize;
    }

    /**
      * Sets the value of the 'lotSize' field.
      * @param value The value of 'lotSize'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setLotSize(int value) {
      validate(fields()[7], value);
      this.lotSize = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lotSize' field has been set.
      * @return True if the 'lotSize' field has been set, false otherwise.
      */
    public boolean hasLotSize() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lotSize' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearLotSize() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'specTreat' field.
      * @return The value.
      */
    public java.lang.Integer getSpecTreat() {
      return specTreat;
    }

    /**
      * Sets the value of the 'specTreat' field.
      * @param value The value of 'specTreat'.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder setSpecTreat(int value) {
      validate(fields()[8], value);
      this.specTreat = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'specTreat' field has been set.
      * @return True if the 'specTreat' field has been set, false otherwise.
      */
    public boolean hasSpecTreat() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'specTreat' field.
      * @return This builder.
      */
    public com.kafang.atgo.memory.avro.record.InstrumentInfo.Builder clearSpecTreat() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InstrumentInfo build() {
      try {
        InstrumentInfo record = new InstrumentInfo();
        record.sendingTime = fieldSetFlags()[0] ? this.sendingTime : (java.lang.Long) defaultValue(fields()[0]);
        record.instrumentId = fieldSetFlags()[1] ? this.instrumentId : (java.lang.Integer) defaultValue(fields()[1]);
        record.transactTime = fieldSetFlags()[2] ? this.transactTime : (java.lang.Long) defaultValue(fields()[2]);
        record.prevClosePrice = fieldSetFlags()[3] ? this.prevClosePrice : (java.lang.Double) defaultValue(fields()[3]);
        record.upPrice = fieldSetFlags()[4] ? this.upPrice : (java.lang.Double) defaultValue(fields()[4]);
        record.downPrice = fieldSetFlags()[5] ? this.downPrice : (java.lang.Double) defaultValue(fields()[5]);
        record.tickSize = fieldSetFlags()[6] ? this.tickSize : (java.lang.Double) defaultValue(fields()[6]);
        record.lotSize = fieldSetFlags()[7] ? this.lotSize : (java.lang.Integer) defaultValue(fields()[7]);
        record.specTreat = fieldSetFlags()[8] ? this.specTreat : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InstrumentInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<InstrumentInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InstrumentInfo>
    READER$ = (org.apache.avro.io.DatumReader<InstrumentInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
