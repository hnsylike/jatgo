package com.kafang.atgo.restful.service;

import com.kafang.atgo.bean.fix.FixOrder;
import com.kafang.atgo.restful.entity.WsUserCustomerMp;
import com.kafang.atgo.persistence.json.JsonSerializationUtil;
import com.kafang.atgo.restful.service.api.WsUserCustomerMpService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.net.URI;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CopyOnWriteArraySet;

@Slf4j
@ServerEndpoint(value = "/websocket")
@Component
public class WebSocketService {
    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。
    private static int onlineCount = 0;

    //与某个客户端的连接会话，需要通过它来给客户端发送数据
    private Session session;

    //用来存放clientid或userid对应的MyWebSocket对象列表。
    private static ConcurrentMap<String, CopyOnWriteArraySet<WebSocketService>> clientByUserIdMap = new ConcurrentHashMap<>();

    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。
    private static CopyOnWriteArraySet<WebSocketService> webSocketSet = new CopyOnWriteArraySet<>();

    @Autowired
    private WsUserCustomerMpService wsUserCustomerMpService;

    /**
     * 连接建立成功调用的方法
     */
    @OnOpen
    public void onOpen(Session session) {
        this.session = session;
        webSocketSet.add(this);     //加入set中
        addOnlineCount();           //在线数加1
        log.info("有新连接加入！当前在线人数为" + getOnlineCount());
        /*try {
            sendMessage("有新连接加入！当前在线人数为" + getOnlineCount());
        } catch (IOException e) {
            log.info("IO异常");
        }*/
    }

    /**
     * 连接关闭调用的方法
     */
    @OnClose
    public void onClose() {
        webSocketSet.remove(this);  //从set中删除
        subOnlineCount();           //在线数减1
        log.info("有一连接关闭！当前在线人数为" + getOnlineCount());

        for (Map.Entry<String, CopyOnWriteArraySet<WebSocketService>> entry : clientByUserIdMap.entrySet()) {
            if (entry.getValue().contains(this)) {
                entry.getValue().remove(this);
            }
        }
    }

    /**
     * 收到客户端消息后调用的方法
     *
     * @param message 客户端发送过来的消息
     *                只接受两种消息：clientId_id和userId_id
     */
    @OnMessage
    public void onMessage(String message, Session session) {
        log.info("来自客户端的消息:" + message);
        boolean bol = true;
        for (Map.Entry<String, CopyOnWriteArraySet<WebSocketService>> entry : clientByUserIdMap.entrySet()) {
            if (entry.getValue().contains(this)) {
                if (entry.getKey().equals(message)) {
                    bol = false;
                } else {
                    entry.getValue().remove(this);
                }
                break;
            }
        }

        if (bol) {
            CopyOnWriteArraySet<WebSocketService> set = new CopyOnWriteArraySet<>();
            if (clientByUserIdMap.containsKey(message)) {
                set = clientByUserIdMap.get(message);
            }
            set.add(this);
            clientByUserIdMap.put(message, set);
        }

    }

    /**
     * 发生错误时调用
     */

    @OnError
    public void onError(Session session, Throwable error) {
        log.error("webSocket发生错误", error);
    }


    /**
     * 发送消息给客户端
     *
     * @param message
     * @throws IOException
     */
    public void sendMessage(String message) throws IOException {
        this.session.getBasicRemote().sendText(message);
    }

    /**
     * 发送消息给客户端
     *
     * @param clientId
     * @param fixOrder
     */
    public void sendMessageByClientId(int clientId, FixOrder fixOrder) {
        try {
            String message = JsonSerializationUtil.objToJson(fixOrder);
            Set<String> clientSet = new HashSet<>();
            clientSet.add("clientId_" + clientId);
            List<Integer> clientIdList = new ArrayList<>();
            clientIdList.add(clientId);
            List<WsUserCustomerMp> list = wsUserCustomerMpService.getByClientId(clientIdList);
            for (WsUserCustomerMp userCustomer : list) {
                clientSet.add("userId_" + userCustomer.getUserID());
            }

            for (String client : clientSet) {
                if (clientByUserIdMap.containsKey(client)) {
                    CopyOnWriteArraySet<WebSocketService> set = clientByUserIdMap.get(client);
                    for (WebSocketService item : set) {
                        item.sendMessage(message);
                    }
                }
            }
        } catch (IOException e) {
            log.error("=======clientId=" + clientId + ",websocket消息未推送成功", e);
        }
    }

    /**
     * 群发自定义消息
     */
    public static void sendInfo(String message) throws IOException {

        for (Map.Entry<String, CopyOnWriteArraySet<WebSocketService>> entry : clientByUserIdMap.entrySet()) {
            for (WebSocketService item : entry.getValue()) {
                try {
                    item.sendMessage(message);
                } catch (IOException e) {
                    continue;
                }
            }
        }
    }

    public ConcurrentMap<String, CopyOnWriteArraySet<WebSocketService>> getClientInfoAll() {
        return clientByUserIdMap;
    }

    public List<String> getClientAll() {
        List<String> result = new ArrayList<>();
        for (WebSocketService item : webSocketSet) {
            URI url = item.session.getRequestURI();
            result.add("host=" + url.getHost() + "；port=" + url.getPort());
        }
        return result;
    }

    public static synchronized int getOnlineCount() {
        return onlineCount;
    }

    public static synchronized void addOnlineCount() {
        WebSocketService.onlineCount++;
    }

    public static synchronized void subOnlineCount() {
        WebSocketService.onlineCount--;
    }
}
