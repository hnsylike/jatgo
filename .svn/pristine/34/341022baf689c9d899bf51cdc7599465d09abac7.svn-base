package com.kafang.atgo.restful.filter;

import com.kafang.atgo.AtgoErrorCode;
import com.kafang.atgo.AtgoException;
import com.kafang.atgo.restful.bean.req.SendCodeBean;
import com.kafang.atgo.restful.resource.OrderRestfulApi;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import java.time.LocalDateTime;

/**
 * @author like
 * @description 过滤token
 * @data 2018/9/29
 */
@Slf4j
@Component
public class AuthorizationFilter implements ContainerRequestFilter {

    @Autowired
    private OrderRestfulApi orderRestfulApi;

    //白名单
    private static String[] whiteArray = {"user/check", "sms/send", "sms/validate", "order/login", "swagger.json", "webSocket/","user/login"};

    @Value("${atgo.token.enable}")
    private Boolean tokenEnable;

    @Override
    public void filter(ContainerRequestContext requestContext) {
        String authorization = requestContext.getHeaderString("Authorization");
        String method = requestContext.getMethod();
        String url = requestContext.getUriInfo().getPath();

        if (null != method && method.equals("OPTIONS")) {
            return;//如果是预处理则不校验token
        }
        if (null != tokenEnable && !tokenEnable) {
            return;//开发测试用
        }

        boolean bol = true;
        for (String white : whiteArray) {
            if (url.contains(white)) {
                bol = false;
                break;
            }
        }
        if (!bol) {
            return;//白名单不需要校验token
        }

        if (!StringUtils.isEmpty(authorization)) {
            String token = authorization.contains("token") ? authorization.substring(5).trim() : authorization;

            SendCodeBean sendCodeBean = orderRestfulApi.getSendCodeBean(token);
            if (null == sendCodeBean || !token.equals(sendCodeBean.getToken()) || LocalDateTime.now().isAfter(sendCodeBean.getTokenTime())) {
                log.info("token已过期!!!");
                throw new AtgoException(AtgoErrorCode.AUTHORIZATION_ERROR,"token已过期!!!");
            }
        } else {
            log.info("请先登录 !!!");
            throw new AtgoException(AtgoErrorCode.AUTHORIZATION_ERROR,"请先登录 !!!");
        }
    }


}
