package com.kafang.atgo.backup.init;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.concurrent.TimeoutException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.eclipse.collections.impl.set.mutable.UnifiedSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.kafang.atgo.backup.BackupProperties;
import com.kafang.atgo.backup.resend.ResendConfigComponent;
import com.kafang.atgo.persistence.json.JsonSerializationUtil;

import io.ffreedom.common.functional.Initializer;
import io.ffreedom.common.log.UseLogger;
import io.ffreedom.transport.rabbitmq.RabbitMqOperatingTools;
import io.ffreedom.transport.rabbitmq.RabbitMqOperatingTools.OperationalChannel;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class RabbitMqInitializer implements Initializer<Boolean> {

	@Autowired
	private BackupProperties properties;

	public RabbitMqInitializer() {
		if (initialize()) {
			log.info("RabbitMq Exchange & Queue successfully initialized...");
		} else {
			log.error("RabbitMq Exchange & Queue initialization failed!");
			System.exit(-1);
		}
	}

	@Override
	public Boolean initialize() {
		InputStream inputStream = ResendConfigComponent.class.getClassLoader()
				.getResourceAsStream("queue_config_list.json");

		List<QueueConfig> queueConfigList = null;
		try {
			queueConfigList = JsonSerializationUtil.jsonToList(JsonSerializationUtil.InputStreamToJson(inputStream),
					QueueConfig.class);
		} catch (IOException e) {
			UseLogger.error(log, e);
		}
		if (queueConfigList == null) {
			return false;
		}

		try {
			OperationalChannel operationalChannel = RabbitMqOperatingTools.createChannel(properties.getHost(),
					properties.getPort(), properties.getMqUsername(), properties.getMqPassword());

			return queueConfigList.stream().flatMap(queueConfig -> queueConfig.getBindQueues().stream()).distinct()
					.map(queueName -> {
						try {
							log.info("Declare queue -> {}", queueName);
							return operationalChannel.declareQueueUseDefaultParameter(queueName);
						} catch (IOException e) {
							UseLogger.error(log, e);
							return false;
						}
					}).mapToInt(bool -> bool ? 0 : 1).sum() == 0 && 
					queueConfigList.stream().map(queueConfig -> {
						try {
							log.info("Declare Fanout Exchange -> {}", queueConfig.getExchange());
							return operationalChannel.declareFanoutExchange(queueConfig.getExchange());
						} catch (IOException e) {
							UseLogger.error(log, e);
							return false;
						}
					}).mapToInt(bool -> bool ? 0 : 1).sum() == 0 && 
					queueConfigList.stream().map(queueConfig -> {
						try {
							log.info("Declare Fanout Exchange -> {}", queueConfig.getExchange());
							// TODO bind queue
							return operationalChannel.bindQueue(queueConfig.getExchange(), null);
						} catch (IOException e) {
							UseLogger.error(log, e);
							return false;
						}
					}).mapToInt(bool -> bool ? 0 : 1).sum() == 0;
		} catch (IOException | TimeoutException e) {
			UseLogger.error(log, e);
		}

		queueConfigList.stream().peek(queueConfig -> {

		})

		;

		return true;
	}

}
