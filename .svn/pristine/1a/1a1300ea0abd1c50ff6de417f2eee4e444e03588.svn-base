package com.kafang.atgo.memory.manager;

import java.util.stream.Stream;

import javax.annotation.PostConstruct;

import org.eclipse.collections.api.set.ImmutableSet;
import org.eclipse.collections.impl.set.immutable.ImmutableSetFactoryImpl;
import org.springframework.stereotype.Component;

import com.kafang.atgo.bean.fix.FixCancelOrder;
import com.kafang.atgo.bean.fix.FixOrder;
import com.kafang.atgo.risk.base.RiskValidator;
import com.kafang.atgo.risk.validators.BalanceValidator;
import com.kafang.atgo.risk.validators.CancelOrderHighFrequencyValidator;
import com.kafang.atgo.risk.validators.NewOrderPriceValidator;
import com.kafang.atgo.risk.validators.NewOrderQtyValidator;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public final class RiskManager {

	// public static final RiskManager INSTANCE = new RiskManager();

	ImmutableSet<RiskValidator<FixOrder>> newOrderValidatorSet;

	ImmutableSet<RiskValidator<FixCancelOrder>> cancelOrderValidatorSet;

	@PostConstruct
	public void init() {
		newOrderValidatorSet = ImmutableSetFactoryImpl.INSTANCE.of(
				new BalanceValidator(), 
				new NewOrderPriceValidator(),
				new NewOrderQtyValidator());

		cancelOrderValidatorSet = ImmutableSetFactoryImpl.INSTANCE.of(
				new CancelOrderHighFrequencyValidator());
	}

	public boolean newOrderRiskCheck(FixOrder order) {
		return resultCheck(newOrderValidatorSet.stream()
				.peek(validator -> log.info("Call Risk Validator -> {}", validator.getValidatorName()))
				.map(validator -> validator.validationOrder(order)));
	}

	public boolean cancelOrderRiskCheck(FixCancelOrder order) {
		return resultCheck(cancelOrderValidatorSet.stream().map(validator -> validator.validationOrder(order)));
	}

	private boolean resultCheck(Stream<Boolean> resultStream) {
		return resultStream.filter(result -> result == true).count() == 0;
	}

}
