package com.kafang.atgo.backup.init;

import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeoutException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import com.kafang.atgo.backup.BackupProperties;
import com.kafang.atgo.backup.resend.ResendConfigComponent;
import com.kafang.atgo.persistence.json.JsonSerializationUtil;

import io.ffreedom.common.functional.Initializer;
import io.ffreedom.common.log.UseLogger;
import io.ffreedom.transport.rabbitmq.RabbitMqOperatingTools;
import io.ffreedom.transport.rabbitmq.RabbitMqOperatingTools.OperationalChannel;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class RabbitMqInitializer implements Initializer<Boolean> {

	@Autowired
	private BackupProperties properties;

	public RabbitMqInitializer() {
		if (initialize()) {
			log.info("RabbitMq Exchange & Queue successfully initialized...");
		} else {
			log.error("RabbitMq Exchange & Queue initialization failed!");
			System.exit(-1);
		}
	}

	@Override
	public Boolean initialize() {
		InputStream inputStream = ResendConfigComponent.class.getClassLoader()
				.getResourceAsStream("queue_config_list.json");
		try {
			JsonSerializationUtil.InputStreamToJson(inputStream);
		} catch (IOException e) {
			UseLogger.error(log, e);
		}
		OperationalChannel operationalChannel = null;
		try {
			operationalChannel = RabbitMqOperatingTools.createChannel(properties.getHost(), properties.getPort(),
					properties.getMqUsername(), properties.getMqPassword());
		} catch (IOException | TimeoutException e) {
			UseLogger.error(log, e);
		}
		if (operationalChannel == null) {
			return false;
		}
		return true;
	}

}
