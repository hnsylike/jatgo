package com.kafang.atgo.restful.resource;

import com.kafang.atgo.bean.fix.FixCancelOrder;
import com.kafang.atgo.bean.fix.FixOrder;
import com.kafang.atgo.bean.fix.enums.OrdStatus;
import com.kafang.atgo.restful.entity.OpType;
import com.kafang.atgo.restful.entity.WsAuditTrail;
import com.kafang.atgo.restful.entity.WsOrderIns;
import com.kafang.atgo.restful.entity.WsUser;
import com.kafang.atgo.persistence.json.JsonSerializationUtil;
import com.kafang.atgo.restful.base.AtgoRestfulApi;
import com.kafang.atgo.restful.bean.rep.LogonResult;
import com.kafang.atgo.restful.bean.req.ActualOrder;
import com.kafang.atgo.restful.bean.req.SendCodeBean;
import com.kafang.atgo.restful.dto.rep.ResponseTemplate;
import com.kafang.atgo.restful.service.RabbitMQService;
import com.kafang.atgo.restful.service.api.AgClientService;
import com.kafang.atgo.restful.service.api.OrderInsService;
import com.kafang.atgo.restful.service.api.UserService;
import com.kafang.atgo.restful.service.api.WsAuditTrailService;
import com.kafang.atgo.restful.util.AtgoClOrdIdGenerator;
import com.kafang.atgo.restful.util.Md5Encrypt;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.digest.DigestUtils;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.impl.list.mutable.FastList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;


import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collectors;

@Api(value = "Order Rest Api测试")
@Path("/order")
@Slf4j
@Component
public class OrderRestfulApi extends AtgoRestfulApi {

    /**
     * 进程编号.
     */
    @Value("${web.server.pid}")
    private int pid;

    @Autowired
    private RabbitMQService rabbitMQService;

    private static Map<String, SendCodeBean> cacheSmsCode = new ConcurrentHashMap<>(256);

    @Autowired
    private OrderInsService orderInsService;

    @Autowired
    private UserService userService;

    @Autowired
    private WsAuditTrailService waService;

    @Autowired
    private AgClientService agClientService;

    @GET
    @Path("/login/{username}/{password}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "登录rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<LogonResult> login(@ApiParam(name = "用户名", required = true) @PathParam("username") String username,
                                               @ApiParam(name = "密码", required = true) @PathParam("password") String password) {
        // 生成一个随机整数
        Random random = new Random();
        String token = username + password + random.nextInt();
        log.info(
                "REST: get login message token/login" + DigestUtils.md5Hex(Md5Encrypt.getContentBytes(token, "UTF-8")));
        String pwd = DigestUtils.md5Hex(Md5Encrypt.getContentBytes(password, "UTF-8"));
        LogonResult result = userService.logon(username, pwd);
        result.setToken(DigestUtils.md5Hex(Md5Encrypt.getContentBytes(token, "UTF-8")));
        SendCodeBean sendCode = SendCodeBean.newToken(result.getToken(), LocalDateTime.now().plusMinutes(120));
        cacheSmsCode.put(result.getToken(), sendCode);
        if(!result.isSuccess()) {
            return ResponseTemplate.failed(Response.Status.INTERNAL_SERVER_ERROR, "值不正确");
        }
        WsAuditTrail wat = new WsAuditTrail();
        wat.setUsername(username);
        wat.setOpType(OpType.Login);
        wat.setDescribe("登录操作");
        wat.setTime(new Date());
        waService.insert(wat);
        return ResponseTemplate.ok(result);
    }

    /**
     * 查询审核人对应的订单
     */
    @GET
    @Path("/queryOrder/{userid}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "查询审核母单rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<List<WsOrderIns>> queryOrder(
            @ApiParam(name = "用户id", required = true) @PathParam("userid") int userid) throws Exception {
        log.info("REST: get auditOrder message /queryOrder " + userid);
        List<WsOrderIns> list = orderInsService.selectByReview(userid);
        WsUser wu = userService.getid(userid);
        WsAuditTrail wat = new WsAuditTrail();
        wat.setUsername(wu.getUsername());
        wat.setOpType(OpType.ApproveAlgo);
        wat.setDescribe("审核母单操作");
        wat.setTime(new Date());
        waService.insert(wat);
        return ResponseTemplate.ok(list);
    }

    /**
     * 下单页面存储到数据库
     */
    @POST
    @Path("/newAlgoOrder")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "下母单保存到数据库rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> newAlgoOrder(@Context HttpServletRequest request) throws Exception {
        String req = getRequestStr(request);
        WsOrderIns wo = JsonSerializationUtil.jsonToObj(req, WsOrderIns.class);
        log.info("REST: get algoOrder message /md " + wo);
        // 生成算法PID
        AtgoClOrdIdGenerator acid = new AtgoClOrdIdGenerator(pid);
        // 委托编号（日内唯一）
        wo.setClOrdID(acid.nextClOrdId());
        wo.setAccountID(wo.getAccountID());
        wo.setIsReview(0);
        wo.setTransactTime(new Date());
        if(wo.getOrdType().equals("TWAP")) {
            wo.setOrdType("T");
        } else if(wo.getOrdType().equals("VWAP")) {
            wo.setOrdType("V");
        }
        // 取字符串第一个判断为6开头是sshg代码
        String strs = wo.getSymbol().substring(0, 1);
        // 取字符串前两个开头是xshe深圳
        String strj = wo.getSymbol().substring(0, 2);
        if(strs.equals("6")) {
            wo.setSecurityExchange(2);
            wo.setSecurityType(0);
        } else if(strj.equals("00") || strj.equals("30")) {
            wo.setSecurityExchange(1);
            wo.setSecurityType(0);
        } else if(strj.equals("15")) {
            wo.setSecurityExchange(1);
            wo.setSecurityType(15);
        } else if(strs.equals("5")) {
            wo.setSecurityExchange(2);
            wo.setSecurityType(15);
        } else if(strj.equals("13")) {
            wo.setSecurityExchange(1);
            wo.setSecurityType(13);
        } else if(strs.equals("2")) {
            wo.setSecurityExchange(2);
            wo.setSecurityType(13);
        }
        WsUser wu = userService.getid(wo.getUserid());
        WsAuditTrail wat = new WsAuditTrail();
        wat.setUsername(wu.getUsername());
        wat.setOpType(OpType.ApproveAlgo);
        wat.setDescribe("审核母单" + wo.getClOrdID() + "操作");
        wat.setTime(new Date());
        waService.insert(wat);
        // 母单存储到数据库
        orderInsService.insert(wo);
        return ResponseTemplate.ok();
    }

    /**
     * 审核通过发往rmq
     */
    @POST
    @Path("/sendOrder")
    @Produces(JSON_UTF8)
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> newOrder(@Context HttpServletRequest request) throws Exception {
        String req = getRequestStr(request);
        WsOrderIns wo = JsonSerializationUtil.jsonToObj(req, WsOrderIns.class);
        // D 单笔委托 创建一个单笔委托的对象
        List<WsOrderIns> wsOrderIns = new ArrayList<>();
        List<WsOrderIns> list = orderInsService.selectById(wo.getId());
        if(list != null) {
            for(WsOrderIns ws : list) {
                FixOrder n = FixOrder.buildFixOrder();
                // 发送的北京时间
                n.setSendingTime(LocalDateTime.now());
                // 委托编号（日内唯一）
                n.setClOrdId(ws.getClOrdID());
                // 母账户编号
                n.setClientId(ws.getClientID());
                // 子账号编号
                n.setAccountId(ws.getAccountID());
                // 委托级别
                n.setHandlInst(3);
                // 6位股票代码
                n.setSymbol(Integer.parseInt(ws.getSymbol()));
                // 证券类型
                n.setSecurityType(ws.getSecurityType());
                // 交易所类型
                n.setSecurityExchange(ws.getSecurityExchange());
                // 1买,2卖
                if(ws.getSide().equals("买")) {
                    n.setSide(1);
                }
                if(ws.getSide().equals("卖")) {
                    n.setSide(2);
                }
                // 委托发送时间
                n.setTransactTime(LocalDateTime.now());
                // 委托股数
                n.setOrderQty(ws.getOrderQty());
                if(ws.getOrdType().equals("TWAP")) {
                    n.setOrdType(1);
                }
                if(ws.getOrdType().equals("VWAP")) {
                    n.setOrdType(2);
                }
                // 委托价格
                n.setPrice(ws.getPrice());
                // 订单生效时间
                n.setEffectiveTime(LocalDateTime.now());
                // 订单终止时间
                n.setExpireTime(LocalDateTime.now());
                // 涨停不卖跌停不买
                n.setLimitAction(ws.getLimitAction());
                // 结束时间后是否继续成交
                n.setAfterAction(ws.getAfterAction());
                rabbitMQService.sendNewOrder(n);
                log.info("REST: get algoOrder message to rmq " + n.toString());
                wsOrderIns.add(ws);
                // 发送订单到rmq,WS_ORDER_INS更新表字段reviewTime
                ws.setReviewTime(new Date());
                orderInsService.update(ws);
                return ResponseTemplate.ok();
            }
        }
        return ResponseTemplate.failed(Response.Status.BAD_REQUEST, "");
    }

    /**
     * 母单撤销
     */
    @GET
    @Path("/cancel/{origClOrdId}/{clOrdId}/{accountId}/{clientId}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "母单撤销rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> cancelOrder(
            @ApiParam(name = "被撤的委托编号(日内唯一)", required = true) @PathParam("origClOrdId") Long origClOrdId,
            @ApiParam(name = "本条指令的编号(日内唯一)", required = true) @PathParam("clOrdId") int clOrdId,
            @ApiParam(name = "子账户编号", required = true) @PathParam("accountId") int accountId,
            @ApiParam(name = "母账户编号", required = true) @PathParam("clientId") int clientId) throws Exception {
        // F 撤单
        FixCancelOrder cancelOrder = FixCancelOrder.buildFixCancelOrder().setHandlInst(3)
                .setSendingTime(LocalDateTime.now()).setOrigClOrdId(origClOrdId).setClOrdId(clOrdId)
                .setAccountId(accountId).setClientId(clientId).setTransactTime(LocalDateTime.now()).setCxlType(0);
        rabbitMQService.sendCancelOrder(cancelOrder);
        log.info("REST: get cancelAlgoOrder message to rmq " + cancelOrder.toString());
        return ResponseTemplate.ok();
    }

    /**
     * 修改密码
     *
     * @param userid
     * @param password
     * @return
     */
    @GET
    @Path("/updatePwd/{userid}/{password}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "修改密码rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> login(@ApiParam(name = "用户id", required = true) @PathParam("userid") int userid,
                                                   @ApiParam(name = "密码", required = true) @PathParam("password") String password) {
        log.info("REST: update UserPwd message {}/{}", userid, password);
        WsUser wu = userService.getUserId(userid);
        wu.setId(wu.getId());
        wu.setUserid(wu.getUserid());
        wu.setUsername(wu.getUsername());
        wu.setPassword(DigestUtils.md5Hex(Md5Encrypt.getContentBytes(password, "UTF-8")));
        wu.setRole(wu.getRole());
        userService.update(wu);
        return ResponseTemplate.ok();
    }

    /**
     * 普通单委托
     *
     * @param request
     * @return
     * @throws Exception
     */
    @POST
    @Path("/newActualOrder")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "普通单委托rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> newActualOrder(@Context HttpServletRequest request) throws Exception {
        String req = getRequestStr(request);
        ActualOrder order = JsonSerializationUtil.jsonToObj(req, ActualOrder.class);
        log.info("REST: send ActualOrder message {}", order);
        AtgoClOrdIdGenerator acid = new AtgoClOrdIdGenerator(pid);
        FixOrder fixOrder = FixOrder.buildFixOrder();
        fixOrder.setSendingTime(LocalDateTime.now());
        fixOrder.setClOrdId(acid.nextClOrdId());
        // 母账户编号
        fixOrder.setClientId(order.getClientID());
        // 委托级别
        fixOrder.setHandlInst(1);
        // 6位股票代码
        fixOrder.setSymbol(Integer.parseInt(order.getSymbol()));
        // 取字符串第一个判断为6开头是sshg代码
        String str = order.getSymbol().substring(0, 1);
        // 取字符串前两个开头是xshe深圳
        String strs = order.getSymbol().substring(0, 2);
        // 股票代码6开头为上海
        if(str.equals("6")) {
            // 交易所类型,SH上海
            fixOrder.setSecurityExchange(2);
            // 证券类型cs
            fixOrder.setSecurityType(0);
        }
        if(strs.equals("00") || order.getSymbol().substring(0, 2).equals("30")) {
            fixOrder.setSecurityExchange(1);
            fixOrder.setSecurityType(0);
        }
        if(strs.equals("15")) {
            fixOrder.setSecurityExchange(1);
            // 证券类型ETF
            fixOrder.setSecurityType(15);
        }
        if(str.equals("5")) {
            fixOrder.setSecurityExchange(2);
            fixOrder.setSecurityType(0);
        }
        if(strs.equals("13")) {
            // 市场代码,SZ深圳
            fixOrder.setSecurityExchange(1);
            // 证券类型RB
            fixOrder.setSecurityType(13);
        }
        if(str.equals("2")) {
            // 市场代码,SH上海
            fixOrder.setSecurityExchange(2);
            fixOrder.setSecurityType(13);
        }
        // 1买,2卖
        fixOrder.setSide(order.getSide());
        // 委托发送时间
        fixOrder.setTransactTime(LocalDateTime.now());
        // 委托股数
        fixOrder.setOrderQty(order.getOrderQty());
        // 委托类型
        fixOrder.setOrdType(0);
        // 委托价格
        fixOrder.setPrice(order.getPrice());
        rabbitMQService.sendNewOrder(fixOrder);
        String fixMessage = fixOrder.toFixMessage();
        log.info("public ActualOrder message to rmq {}", fixMessage);
        return ResponseTemplate.ok();
    }

    /**
     * 普通单回报 根据userid查询所有8 的最新状态
     *
     * @param request
     * @return
     * @throws Exception
     */
    @GET
    @Path("/returnActual8ByUser/{userId}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "普通单回报rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<MutableList<FixOrder>> returnActual(
            @ApiParam(required = true, name = "用户id") @PathParam("userId") int userId) throws Exception {
        log.info("REST: get Execution Reports of 8 by userId {}", userId);
        final MutableList<FixOrder> collectList = FastList.newList();
        agClientService.getUserId(userId).forEach(agClient -> {
            rabbitMQService.getOrderReportMap(agClient.getClientID()).ifPresent(map -> {
                collectList.addAll(map.values().stream().map(list -> list != null ? list.getLast() : null)
                        .collect(Collectors.toList()));
            });
        });
        MutableList<FixOrder> returnList = collectList.reject(ord -> ord == null);
        return ResponseTemplate.ok(returnList);
    }

    /**
     * 根据clientId来查询属于这个client的所有8的最新状态
     *
     * @param userId
     * @return
     * @throws Exception
     */
    @GET
    @Path("/returnActual8ByClientId/{clientId}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "根据clientId来查询属于这个client的所有8的最新状态rest api", notes = "rest api")
    @ApiImplicitParam(paramType = "path", required = true, name = "账户编号")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<List<FixOrder>> returnActualExecReportByClientId(
            @ApiParam(required = true, name = "账户编号") @PathParam("clientId") int clientId) throws Exception {
        log.info("REST: get latest Execution Reports by clientId {}", clientId);
        Optional<ConcurrentMap<Long, MutableList<FixOrder>>> execReports = rabbitMQService.getOrderReportMap(clientId);
        if(!execReports.isPresent()) {
            log.info("execReports returned by rabbitMQService is null");
            return ResponseTemplate.failed(Response.Status.INTERNAL_SERVER_ERROR, "没有回报数据");
        }
        List<FixOrder> rt = execReports.get().values().stream()
                .map(list -> list != null ? list.get(list.size() - 1) : null).collect(Collectors.toList());
        if(rt == null) {
            log.info("rt returned by execReports is null");
            return ResponseTemplate.failed(Response.Status.INTERNAL_SERVER_ERROR, "没有回报数据");
        }
        log.info("REST: return latest Execution Reports {}", rt);
        return ResponseTemplate.ok(rt);
    }

    /**
     * 普通单撤单
     *
     * @param request
     * @return
     * @throws Exception
     */
    @GET
    @Path("/cancelActualOrder/{origClOrdId}/{clientId}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "普通单撤单rest api", notes = "rest api")
    @Consumes(JSON_UTF8)
    public ResponseTemplate<Void> cancelActualOrder(
            @ApiParam(required = true, name = "被撤的委托编号（日内唯一）") @PathParam("origClOrdId") long origClOrdId,
            @ApiParam(required = true, name = "母账户编号") @PathParam("clientId") int clientId) throws Exception {
        log.info("REST: Cancel Actual Order, /undoActual/{}/{}", origClOrdId, clientId);
        FixCancelOrder fixOrder = FixCancelOrder.buildFixCancelOrder();
        AtgoClOrdIdGenerator acid = new AtgoClOrdIdGenerator(pid);
        // 委托级别
        fixOrder.setHandlInst(1);
        // 发送的北京时间
        fixOrder.setSendingTime(LocalDateTime.now());
        // 被撤的委托编号（日内唯一）
        fixOrder.setOrigClOrdId(origClOrdId);
        // 券商委托编号(日内唯一)
        fixOrder.setClOrdId(acid.nextClOrdId());
        // 母账户编号
        fixOrder.setClientId(clientId);
        // 委托发送的北京时间
        fixOrder.setTransactTime(LocalDateTime.now());
        fixOrder.setOrdStatus(OrdStatus.PendingCancel.getCode());
        String fixMessage = fixOrder.toFixMessage();
        rabbitMQService.sendCancelOrder(fixOrder);
        log.info("send cancel Actual Order to rmq exchange {} ", fixMessage);
        return ResponseTemplate.ok();
    }

    public SendCodeBean getSendCodeBean(String clientId) {
        return cacheSmsCode.get(clientId);
    }
}
